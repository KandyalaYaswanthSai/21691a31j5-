const axios = require('axios');
const express = require('express');
const app = express();
const port = 9876;
const WINDOW_SIZE = 10;
let numberWindow = [];
let authToken = '';
const thirdPartyAPIs = {
    p: 'http://20.244.56.144/test/primes',
    f: 'http://20.244.56.144/test/fibo',
    e: 'http://20.244.56.144/test/even',
    r: 'http://20.244.56.144/test/rand'
};
// Function to get the authorization token
const getAuthToken = async () => {
    try {
        const response = await axios.post('http://20.244.56.144/test/auth', {
            companyName: 'goMart',
            clientID: '37bb493c-73d3-47ea-8675-21f66ef9b735',
            clientSecret: 'HVIQBVbqmTGEmaED',
            ownerName: 'Rahul',
            ownerEmail: 'rahul@abc.edu',
            rollNo: '1'
        });
        authToken = response.data.access_token;
        console.log('Authorization token obtained:', authToken);
    } catch (error) {
        console.error('Error obtaining auth token:', error.message);
    }
};
// Helper function to calculate average
const calculateAverage = (numbers) => {
    const sum = numbers.reduce((acc, num) => acc + num, 0);
    return (sum / numbers.length).toFixed(2);
};
// Function to fetch numbers and process the window
const processNumberType = async (type) => {
    try {
        const response = await axios.get(thirdPartyAPIs[type], {
            headers: {
                Authorization: `Bearer ${authToken}`
            },
            timeout: 500
        });
        const fetchedNumbers = response.data.numbers;
        // Filter out duplicates
        const uniqueNumbers = fetchedNumbers.filter(num => !numberWindow.includes(num));
        // Add new numbers to the window
        numberWindow.push(...uniqueNumbers);
        // Trim the window if it exceeds the size
        if (numberWindow.length > WINDOW_SIZE) {
            numberWindow = numberWindow.slice(numberWindow.length - WINDOW_SIZE);
        }
        return {
            windowPrevState: numberWindow.slice(0, -uniqueNumbers.length),
            windowCurrState: numberWindow,
            numbers: uniqueNumbers,
            avg: calculateAverage(numberWindow)
        };
    } catch (error) {
        console.error('Error fetching numbers:', error.message);
        return null;
    }
};
// Endpoint to get numbers based on type
app.get('/numbers/:type', async (req, res) => {
    const type = req.params.type;
    if (!thirdPartyAPIs[type]) {
        return res.status(400).json({ error: 'Invalid number type' });
    }
    const result = await processNumberType(type);
    if (result) {
        res.json(result);
    } else {
        res.status(500).json({ error: 'Failed to fetch numbers' });
    }
});
// Obtain the auth token before starting the server
getAuthToken().then(() => {
    app.listen(port, () => {
        console.log(`Average Calculator Microservice is running on http://localhost:${port}`);
    });
});

